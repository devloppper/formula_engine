[
  {
    "formula_name": "REPLACEB",
    "formula_desc": "REPLACEB（原字符串，开始位置，字节个数，新字符串)",
    "args_type": [
      "String",
      "Integer",
      "Integer",
      "String"
    ],
    "return_type": "String"
  },
  {
    "formula_name": "INT",
    "formula_desc": "INT(数值) 将数值转成整数 非四舍五入 截取整数",
    "args_type": [
      "Number"
    ],
    "return_type": "Integer"
  },
  {
    "formula_name": "GTE",
    "formula_desc": "GTE(v1,v2) v1 >= v2",
    "args_type":[
      "Any",
      "Any"
    ],
    "return_type": "Bool"
  },
  {
    "formula_name": "LTE",
    "formula_desc": "LTE(v1,v2) v1 <= v2",
    "args_type":[
      "Any",
      "Any"
    ],
    "return_type": "Bool"
  },
  {
    "formula_name": "NEQ",
    "formula_desc": "NEQ(v1,v2) v1 != v2",
    "args_type":[
      "Any",
      "Any"
    ],
    "return_type": "Bool"
  },
  {
    "formula_name": "LT",
    "formula_desc": "LT(v1,v2) v1 < v2",
    "args_type":[
      "Any",
      "Any"
    ],
    "return_type": "Bool"
  },
  {
    "formula_name": "GT",
    "formula_desc": "GT(v1,v2) v1 > v2",
    "args_type":[
      "Any",
      "Any"
    ],
    "return_type": "Bool"
  },
  {
    "formula_name": "EQ",
    "formula_desc": "EQ(v1,v2) v1 == v2",
    "args_type":[
      "Any",
      "Any"
    ],
    "return_type": "Bool"
  },
  {
    "formula_name": "LIKE",
    "formula_desc": "LIKE(pattern, str) 进行字符串匹配 现在进支持 %",
    "args_type":[
      "Any",
      "Any"
    ],
    "return_type": "Bool"
  },
  {
    "formula_name": "ISBLANK",
    "formula_desc": "ISBLANK(str, [will_trim]) 判断str是否是空字符串 will_trim为true是，表示去除前后空格",
    "args_type": [
      "String",
      "...Bool"
    ],
    "return_type": "Bool"
  },
  {
    "formula_name": "HASSUBSTR",
    "formula_desc": "HASSUBSTR(strA, strB) 判断字符串strB是否属于字符串strA 大小写敏感",
    "args_type": [
      "String",
      "String"
    ],
    "return_type": "Bool"
  },
  {
    "formula_name": "INCLUDESTR",
    "formula_desc": "INCLUDESTR(strA, str_list) 判断字符串strA是否属于列表str_list 大小写敏感",
    "args_type": [
      "String",
      "...String"
    ],
    "return_type": "Bool"
  },
  {
    "formula_name": "NINCLUDESTR",
    "formula_desc": "NINCLUDESTR(strA, str_list) 判断字符串strA是否不属于列表str_list 大小写敏感",
    "args_type": [
      "String",
      "...String"
    ],
    "return_type": "Bool"
  },
  {
    "formula_name": "MID",
    "formula_desc": "MID(字符串,起始位置,取子符串位数) 起始位置包含 小于1按1处理",
    "args_type": [
      "String",
      "Integer",
      "Integer"
    ],
    "return_type": "String"
  },
  {
    "formula_name": "LEFT",
    "formula_desc": "LEFT(字符串,取子符串位数)",
    "args_type":[
      "String",
      "Integer"
    ],
    "return_type": "String"
  },
  {
    "formula_name": "RIGHT",
    "formula_desc": "RIGHT(字符串,取子符串位数)",
    "args_type":[
      "String",
      "Integer"
    ],
    "return_type": "String"
  },
  {
    "formula_name": "IF",
    "formula_desc": "IF(BOOL, ANY, ANY)判断条件且取值",
    "args_type": [
      "Bool",
      "Any",
      "Any"
    ],
    "return_type": "Any"
  },
  {
    "formula_name": "CONVERTSTR",
    "formula_desc": "CONVERTSTR(...ANY) 将中间所有东西转换成String",
    "args_type": [
      "...Any"
    ],
    "return_type": "String"
  },
  {
    "formula_name": "LEN",
    "formula_desc": "LEN(String) 取长度",
    "args_type": [
      "String"
    ],
    "return_type": "Integer"
  },
  {
    "formula_name": "MIN",
    "formula_desc": "MIN(...ANY)返回集合中最小的一个【转String类型进行比较】",
    "args_type": [
      "...Any"
    ],
    "return_type": "Any"
  },
  {
    "formula_name": "ARRAY_SPLIT",
    "formula_desc": "ARRAY_SPLIT(String) 数组默认以 , 隔开，因此本方法将字符串按照 , 分割为数组",
    "args_type": [
      "String"
    ],
    "return_type": "ArrayString"
  },
  {
    "formula_name": "CONCAT",
    "formula_desc": "CONCAT(...ANY) 将所有的内容拼接为字符串",
    "args_type": [
      "String"
    ],
    "return_type": "String"
  },
  {
    "formula_name": "ADD",
    "formula_desc": "文本数字相加",
    "args_type":[
      "String",
      "Integer"
    ],
    "return_type": "String"
  }
]